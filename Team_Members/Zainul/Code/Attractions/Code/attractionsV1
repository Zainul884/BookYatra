//ChatGPT was used to fix some bugs in this code
//The prompt I entered was "This is my code for fetching attractions from the Booking.com API on RapidAPI. The attractions are being fetched but the results arent being displayed.
//When I entered this, ChatGPT found my bug which was related to incorrect data handling of the information. The way I was handling the data and the way the API was handling the data was different which is why it wasnt displaying
//I also used ChatGPT to provide suggestions for my code which I later added such as comments and proper formatting or better code
//My name is Zainul Malik

"use client";
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Header = () => <header>Attraction Search</header>;

const styles = {
    container: {
      fontFamily: 'Arial, sans-serif',
      maxWidth: '1200px',
      margin: 'auto',
      padding: '20px',
      textAlign: 'center',
    },
    header: {
      fontSize: '2rem',
      color: '#2c3e50',
      marginBottom: '20px',
    },
    attractionList: {
      display: 'flex',
      flexWrap: 'wrap',
      justifyContent: 'center',
      gap: '20px',
    },
    attractionItem: {
      border: '1px solid #ddd',
      borderRadius: '4px',
      width: '300px',
      overflow: 'hidden',
      boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',
      transition: 'transform 0.3s ease-in-out',
      marginBottom: '20px',
    },
    attractionItemHover: {
      transform: 'translateY(-5px)',
      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.2)',
    },
    image: {
      width: '100%',
      height: '200px',
      objectFit: 'cover',
    },
    details: {
      padding: '15px',
    },
    name: {
      fontWeight: 'bold',
      color: '#34495e',
      marginBottom: '5px',
    },
    description: {
      color: '#7f8c8d',
      fontSize: '0.9rem',
      height: '60px',
      overflow: 'hidden',
      marginBottom: '10px',
    },
    cityCountry: {
      fontSize: '0.9rem',
      color: '#16a085',
      marginBottom: '10px',
    },
    fetchButton: {
      backgroundColor: '#27ae60',
      color: 'white',
      padding: '10px 20px',
      border: 'none',
      borderRadius: '4px',
      cursor: 'pointer',
      fontSize: '1rem',
      marginTop: '20px',
    },
    fetchButtonHover: {
      backgroundColor: '#2ecc71',
    },
  };
  
const productIds = [
  "eyJwaW5uZWRQcm9kdWN0IjoiUFJKN2RIa0FlWllaIiwidWZpIjoyMDA4ODMyNX0=",
  "eyJwaW5uZWRQcm9kdWN0IjoiUFJqa0FWUUt4V1hwIiwidWZpIjoyMDA1MDI2NH0=",
  "eyJwaW5uZWRQcm9kdWN0IjoiUFJDeG5vVko2d241IiwidWZpIjoyMDA4ODMyNX0=",
  "eyJwaW5uZWRQcm9kdWN0IjoiUFJIRmVON09MNVhFIiwidWZpIjotMjEwNjEwMn0=",
  "eyJwaW5uZWRQrm9kdWN0IjoiUFJlV0F1RWhaMFdIIiwidWZpIjoyMDA1MDI2NH0="
];

const getRandomProductId = () => {
  const randomIndex = Math.floor(Math.random() * productIds.length);
  return productIds[randomIndex];
};

function AttractionSearch() {
  const [attractions, setAttractions] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const fetchAttractions = async () => {
    setIsLoading(true);
    setError('');

    const randomProductId = getRandomProductId();
    const apiKey = 'ae41750b50msh389a7b6e1203026p127800jsnc1c3b5dbac79'; 

    const options = {
      method: 'GET',
      url: 'https://booking-com15.p.rapidapi.com/api/v1/attraction/searchAttractions',
      params: { id: randomProductId },
      headers: {
        'X-RapidAPI-Key': 'ae41750b50msh389a7b6e1203026p127800jsnc1c3b5dbac79',
        'X-RapidAPI-Host': 'booking-com15.p.rapidapi.com',
      },
    };

    try {
      const response = await axios.request(options);
      if (response.data && response.data.data && response.data.data.products) {
        setAttractions(response.data.data.products);
      } else {
        setAttractions([]);
      }
    } catch (error) {
      console.error('Error fetching attractions:', error);
      setError('An error occurred while fetching attractions.');
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchAttractions();
  }, []);

  return (
    <div style={{
      fontFamily: 'Arial, sans-serif',
      maxWidth: '1200px',
      margin: 'auto',
      padding: '20px',
      textAlign: 'center',
    }}>
      <div style={{
        fontSize: '2rem',
        color: '#2c3e50',
        marginBottom: '20px',
      }}>Discover Amazing Places</div>
      
      <div style={{
        display: 'flex',
        flexWrap: 'wrap',
        justifyContent: 'center',
        gap: '20px',
      }}>
        {isLoading ? (
          <p>Loading attractions...</p>
        ) : error ? (
          <p>{error}</p>
        ) : (
          attractions.map((attraction, index) => (
            <div key={index} style={{
              border: '1px solid #ddd',
              borderRadius: '4px',
              width: '300px',
              overflow: 'hidden',
              boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',
              transition: 'transform 0.3s ease-in-out',
              marginBottom: '20px',
            }}>
              {attraction.primaryPhoto && (
                <img
                  src={attraction.primaryPhoto.small}
                  alt={attraction.name}
                  style={{
                    width: '100%',
                    height: '200px',
                    objectFit: 'cover',
                  }}
                />
              )}
              <div style={{
                padding: '15px',
              }}>
                <div style={{
                  fontWeight: 'bold',
                  color: '#34495e',
                  marginBottom: '5px',
                }}>{attraction.name}</div>
                <p style={{
                  color: '#7f8c8d',
                  fontSize: '0.9rem',
                  height: '60px',
                  overflow: 'hidden',
                  marginBottom: '10px',
                }}>{attraction.shortDescription}</p>
                <div style={{
                  fontSize: '0.9rem',
                  color: '#16a085',
                  marginBottom: '10px',
                }}>
                  {attraction.ufiDetails.bCityName}, {attraction.ufiDetails.url.country.toUpperCase()}
                </div>
              </div>
            </div>
          ))
        )}
      </div>
      
      <button
        style={{
          backgroundColor: '#27ae60',
          color: 'white',
          padding: '10px 20px',
          border: 'none',
          borderRadius: '4px',
          cursor: 'pointer',
          fontSize: '1rem',
          marginTop: '20px',
        }}
        onClick={fetchAttractions}
        onMouseOver={(e) => e.currentTarget.style.backgroundColor = '#2ecc71'}
        onMouseOut={(e) => e.currentTarget.style.backgroundColor = '#27ae60'}
      >
        Discover New Attractions
      </button>
    </div>
  );
    }  
export default AttractionSearch;
