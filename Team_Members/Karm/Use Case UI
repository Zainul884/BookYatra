//Styled components ui library has been used for some code 

"use client";
import axios from 'axios';
import { createUserWithEmailAndPassword, getAuth, onAuthStateChanged, signInWithEmailAndPassword, signOut } from 'firebase/auth';
import { getDatabase, onValue, ref, set } from 'firebase/database';
import { useEffect, useState } from 'react';
import styled, { createGlobalStyle, keyframes } from 'styled-components';
import './firebaseConfig';

// Styled-components for the form
const GlobalStyle = createGlobalStyle`
  body {
    margin: 0;
    padding: 0;
    background: url('./images/LP.jpg') no-repeat ;
    background-size: cover;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
  }

  
  
`;

const fadeIn = keyframes`
  from { opacity: 0; }
  to { opacity: 1; }
`;

const FormContainer = styled.div`
  background-color: #ffffff;
  border-radius: 10px;
  box-shadow: 0 8px 24px rgba(0,0,0,0.2);
  padding: 60px;
  width: 100%;
  margin-right: 700px;
  max-width: 500px;
  z-index: 2;
  animation: ${fadeIn} 0.5s ease-in-out;
  display: flex;
  flex-direction: column;
  gap: 20px;
`;

const Title = styled.h2`
  font-size: 24px;
  color: #333;
  text-align: center;
  margin: 0 0 20px 0;
`;

const InputGroup = styled.div`
  display: flex;
  flex-direction: column;
  gap: 5px;
`;

const Label = styled.label`
  font-size: 16px;
  color: #666;
`;

const Input = styled.input`
  padding: 12px 15px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 16px;
  background-color: #f9f9f9;
  transition: border-color 0.3s;

  &:focus {
    border-color: #0056b3;
    outline: none;
  }
`;

const Button = styled.button`
  padding: 12px 15px;
  border: none;
  border-radius: 5px;
  background-color: #0056b3;
  color: white;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.3s;

  &:hover {
    background-color: #004494;
  }
`;






const SwitchModeButton = styled.button`
  background: none;
  color: #0056b3;
  border: none;
  margin-top: 15px;
  cursor: pointer;
  font-size: 14px;
  text-decoration: underline;

  &:hover {
    text-decoration: none;
  }
`;



const styles = {
  container: {
    fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
    color: '#333',
    backgroundColor: 'rgba(255, 255, 255, 0.8)',
    padding: '20px',
    width: '100%',
     // Adjusted for a wider layout
    margin: '0 auto', // Centered in the viewport
    boxShadow: '0 8px 16px rgba(0,0,0,0.2)',
    borderRadius: '12px',
    transition: 'all 0.3s ease-in-out',
    position: 'relative', // Added for absolute positioning of children if needed
  },
  signOut: {
    position: 'absolute',
    top: '50px',
    right: '50px',
  },
  
  header: {
    color: 'white',
    fontSize: '32px',
    fontWeight: 'bold',
    position: 'absolute',
    top: '50px',
    left: '50px',
    alignItems:'left',

    
  },
  formContainer: {
    backgroundColor: 'white',
    padding: '15px', // Increased padding for more space
    marginTop: '30px', // Increased margin-top for more space between sections
    borderRadius: '12px',
    display: 'flex',
    flexDirection: 'row',
    boxShadow: '0 4px 8px rgba(0,0,0,0.1)', // Softer shadow for a subtle effect
    marginBottom: '40px', // Increased margin-bottom for more space between sections
    transition: 'transform 0.3s ease-out', // Subtle transform effect
    transform: 'translateY(0)', // Initial transform state
    width:'60%',
    gap: '20px', // Increased gap between form elements
    marginLeft: '270px',
    padding: '10px',
    
    
  },
  inputGroup: {
    marginBottom: '25px', // Increased space between input groups
  },
  inputGroup1: {
    backgroundColor: 'white',
    color: 'black',
    display: 'flex',
    flexDirection: 'row',
    borderRadius: '30px',
    padding: '30px',
    marginLeft: '300px',
    marginTop: '50px',
    
    width: '55%',
   
    },
  p2: {
    color: 'white',
    fontSize: '48px',
    fontWeight: 'bold',
    width: '500px',
    marginTop: '20px',
    },
  searchContainer: {
    background: "linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('./images/gb.jpg') no-repeat center center",
    backgroundSize: 'cover',
    padding: '20px', // Increased padding for a larger appearance
    borderRadius: '10px',
    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',
    marginBottom: '30px',
   
    justifyContent: 'space-between', // Distribute space between items
    
   
    
  },
  label: {
    display: 'block',
    marginBottom: '15px', // More space between label and input
    fontWeight: 'bold', // Bold labels for better readability
    color: '#444', // Slightly darker for better contrast
  },
  label1: {
    display: 'block',
    marginBottom: '15px', // More space between label and input
    fontWeight: 'bold', // Bold labels for better readability
    width: '200px',
    
  },
  n:{
   
    marginTop: '200px',
    marginLeft: '930px',
    
},
  input: {
    width: '100%',
    padding:'10px',// Increased padding for better input visibility
    border: '2px solid #ccc', // Thicker border for more pronounced input fields
    borderRadius: '8px', // Rounded corners for a modern look
     // Increased margin-bottom for more space
    fontSize: '16px', // Larger font size for better readability
    maxWidth: '200px', // Set max width for larger screens
  },
  button1: {
    padding: '10px', // More substantial padding for a larger button
    borderRadius: '8px', // Rounded corners for buttons
    backgroundColor: '#007bff', // A more vibrant button color
    color: 'white',
    fontSize: '18px', // Larger font size for buttons
    cursor: 'pointer',
    marginLeft: '20px', // Added margin for better spacing
    width: '200px', // Adjusting width for responsiveness
    transition: 'background-color 0.3s, transform 0.2s', // Smooth background and transform transition
    ':hover': {
      backgroundColor: '#0069d9', // Darken button on hover for visual feedback
      transform: 'scale(1.05)', // Slightly scale up buttons on hover
    },
  },
  button: {
    padding: '10px',
    marginTop:'40px', // More margin at the top for better spacing
    height: '50%', // Increased height for a larger button
    
    borderRadius: '8px', // Rounded corners for buttons
    backgroundColor: '#007bff', // A more vibrant button color
    color: 'white',
    fontSize: '18px', // Larger font size for buttons
    cursor: 'pointer',
    
  },
  resultItem: {
    borderBottom: '2px solid #eee', // Thicker bottom border for clear separation
    paddingBottom: '20px', // More padding at the bottom
    marginBottom: '20px', // More space between items
    transition: 'background-color 0.3s ease-in-out', // Background color transition for hover effect
    ':hover': {
      backgroundColor: '#f8f9fa', // Subtle hover background change
    },
  },
  flexContainer: {
    display: 'flex',
    
    flexDirection: 'column',
    gap: '20px', // More gap between flex items
  },
  halfWidthContainer: {
    flex: '1',
    
    padding: '20px', // Padding inside each half-width container
    backgroundColor: '#f8f9fa', // Background color for each container for distinction
    borderRadius: '8px', // Rounded corners for internal containers
    boxShadow: '0 2px 4px rgba(0,0,0,0.1)', // Subtle shadow for depth
  },
  
  authInput: { // New style for the authentication input fields
    width: '100%',
    padding: '10px',
    margin: '5px 0',
    borderRadius: '4px',
    border: '1px solid #ddd',
    fontSize: '16px',
    backgroundColor: '#fff', // Ensuring the background is white for visibility
  },
  authButton: { // New style for the authentication buttons
    width: '100%',
    padding: '10px',
    border: 'none',
    borderRadius: '4px',
    backgroundColor: '#4CAF50', // Changing button color for distinction
    color: 'white',
    fontSize: '16px',
    cursor: 'pointer',
    transition: 'background-color 0.3s ease',
    ':hover': {
      backgroundColor: '#45a049', // Darker shade on hover
    },
  },

    resultsContainer1: {
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'center',
      gap: '20px',
      padding: '20px',
    },
    
    halfWidthContainer1: {
      width: '100%',
    },
    resultItem2: {
      backgroundColor: 'white',
      padding: '20px',
      borderRadius: '8px',
      boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
      border: '2px solid black',
      marginBottom: '20px',
      
      },
    
    hotelName1: {
      fontSize: '20px',
      fontWeight: 'bold',
      color: '#333',
      marginBottom: '10px',
    },
    hotelInfo1: {
      fontSize: '16px',
      color: '#666',
      marginBottom: '15px',
    },
    favoriteButton1: {
      backgroundColor: '#007bff',
      color: 'white',
      border: 'none',
      borderRadius: '5px',
      padding: '10px 15px',
      fontSize: '16px',
      cursor: 'pointer',
      transition: 'background-color 0.3s',
    }
  
};



function DestIdSearch() {
  const [destResults, setDestResults] = useState([]);
  const [isLoadingDest, setIsLoadingDest] = useState(false);
  const [errorDest, setErrorDest] = useState('');
  const [query, setQuery] = useState('');

  const [hotels, setHotels] = useState([]);
  const [isLoadingHotels, setIsLoadingHotels] = useState(false);
  const [errorHotels, setErrorHotels] = useState('');
  const [destId, setDestId] = useState('');
  const [arrivalDate, setArrivalDate] = useState('');
  const [departureDate, setDepartureDate] = useState('');
  const [adults, setAdults] = useState('1');
  const [childrenAge, setChildrenAge] = useState('0,17');
  const [roomQty, setRoomQty] = useState('1');
  const [favorites, setFavorites] = useState([]);
  const [user, setUser] = useState(null);
  const [isSigningUp, setIsSigningUp] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [submitStatus, setSubmitStatus] = useState('');

  
  useEffect(() => {
    const auth = getAuth();
    const unsubscribeAuth = onAuthStateChanged(auth, (user) => {
      if (user) {
        console.log("User logged in:", user.uid); // Log user ID for verification
        setUser(user);
  
        const database = getDatabase();
        const userDataRef = ref(database, `users/${user.uid}/favoritesData`);
        
        const unsubscribeData = onValue(userDataRef, (snapshot) => {
          const data = snapshot.val();
          console.log("Retrieved data:", data); // Log the retrieved data
          if (data && data.favorites) {
            setFavorites(data.favorites);
          } else {
            setFavorites([]);
          }
        }, (error) => {
          console.error("Error fetching data:", error);
        });
  
        return () => unsubscribeData();
      } else {
        console.log("No user logged in");
        setUser(null);
        setFavorites([]);
      }
    });
  
    return () => unsubscribeAuth();
  }, [user]); // Add 'user' to the dependency array
  
  
  

  const fetchFavorites = (userId) => {
    const favoritesRef = firebase.database().ref(`users/${userId}/favorites`);
    favoritesRef.on('value', (snapshot) => {
      const data = snapshot.val();
      if (data) {
        setFavorites(data.favoritesList || []);
      }
    });
  };


  const addToFavorites = (hotel) => {
    setFavorites(prevFavorites => {
      const newFavorites = prevFavorites.some(fav => fav.hotel_id === hotel.hotel_id) 
        ? prevFavorites 
        : [...prevFavorites, hotel];
  
      if (user) {
        const database = getDatabase();
        const favoritesRef = ref(database, `users/${user.uid}/favorites`);
        set(favoritesRef, newFavorites);
      }
  
      return newFavorites;
    });
  };
  
  const submitFavorites = () => {
    if (user && favorites.length > 0) {
      const database = getDatabase();
      const favoritesRef = ref(database, `users/${user.uid}/favoritesData`);

      set(favoritesRef, {
        favorites: favorites,
        totalCost: calculateTotalPrice()
      }).then(() => {
        console.log("Favorites successfully submitted!");
        setSubmitStatus("Favorites successfully submitted!");
      }).catch((error) => {
        console.error("Error submitting favorites:", error);
        setSubmitStatus("Error submitting favorites. Please try again.");
      });
    } else {
      setSubmitStatus("No favorites to submit.");
    }
  };
  
  

  const signIn = (email, password) => {
    const auth = getAuth();
    signInWithEmailAndPassword(auth, email, password)
      .then((userCredential) => {
        // Signed in 
        // You can set user state or perform other actions here
      })
      .catch(error => console.error("Error signing in:", error));
  };

  const handleSignOut = () => {
    const auth = getAuth();
    signOut(auth).then(() => {
      console.log("User signed out");
      setUser(null); // Reset the user state
      setFavorites([]); // Clear favorites upon sign out
    }).catch((error) => {
      console.error("Sign out error:", error);
    });
  };

  const signUp = (email, password) => {
    const auth = getAuth();
    createUserWithEmailAndPassword(auth, email, password)
      .then((userCredential) => {
        // User created
        // You can set user state or perform other actions here
      })
      .catch(error => console.error("Error signing up:", error));
  };


  const calculateTotalPrice = () => {
    return favorites.reduce((total, hotel) => {
      // Accessing the nested price
      const hotelPrice = parseFloat(hotel.property.priceBreakdown.grossPrice.value);
      return total + (isNaN(hotelPrice) ? 0 : hotelPrice);
    }, 0);
  }

  

  const fetchDestId = async () => {
    setIsLoadingDest(true);
    setErrorDest('');
    setDestResults([]);

    const options = {
      method: 'GET',
      url: 'https://booking-com15.p.rapidapi.com/api/v1/hotels/searchDestination',
      params: { query: query },
      headers: {
        'X-RapidAPI-Key': 'ae41750b50msh389a7b6e1203026p127800jsnc1c3b5dbac79',
        'X-RapidAPI-Host': 'booking-com15.p.rapidapi.com',
      },
    };

    try {
      const response = await axios.request(options);
      setDestResults(response.data.data);
    } catch (error) {
      console.error("Error fetching destination ID:", error);
      setErrorDest("An error occurred while fetching the destination ID.");
    } finally {
      setIsLoadingDest(false);
    }
  };



  const fetchHotels = async () => {
    setIsLoadingHotels(true);
    setErrorHotels('');
  
    const hotelOptions = {
      method: 'GET',
      url: 'https://booking-com15.p.rapidapi.com/api/v1/hotels/searchHotels',
      params: {
        dest_id: destId,
        search_type: 'CITY',
        arrival_date: arrivalDate,
        departure_date: departureDate,
        adults: adults,
        children_age: childrenAge,
        room_qty: roomQty,
        page_number: '1',
        languagecode: 'en-us',
        currency_code: 'CAD'
      },
      headers: {
        'X-RapidAPI-Key': 'ae41750b50msh389a7b6e1203026p127800jsnc1c3b5dbac79',
        'X-RapidAPI-Host': 'booking-com15.p.rapidapi.com',
      },
    };
  
    try {
      const response = await axios.request(hotelOptions);
      // Access the hotels array within the data object
      if (response.data && response.data.data && Array.isArray(response.data.data.hotels)) {
        setHotels(response.data.data.hotels);
      } else {
        setHotels([]); // Set to empty if the path is not as expected
      }
    } catch (error) {
      console.error("Error fetching hotels:", error);
      setErrorHotels("An error occurred while fetching hotels.");
    } finally {
      setIsLoadingHotels(false);
    }
  };
  
  if (!user) {
    return (
      <>
        <GlobalStyle />
        
        <div className="overlay"></div>
        {!user ? (
          <FormContainer>
            <Title>{isSigningUp ? "Sign Up" : "Sign In"}</Title>
            <InputGroup>
              <Label>Email</Label>
              <Input
                type="email"
                value={email}
                placeholder="Enter your email"
                onChange={(e) => setEmail(e.target.value)}
              />
            </InputGroup>
            <InputGroup>
              <Label>Password</Label>
              <Input
                type="password"
                value={password}
                placeholder="Enter your password"
                onChange={(e) => setPassword(e.target.value)}
              />
            </InputGroup>
            <Button onClick={() => isSigningUp ? signUp(email, password) : signIn(email, password)}>
              {isSigningUp ? "Sign Up" : "Sign In"}
            </Button>
            <SwitchModeButton onClick={() => setIsSigningUp(!isSigningUp)}>
              {isSigningUp ? "Already have an account? Sign In" : "Don't have an account? Sign Up"}
            </SwitchModeButton>
          </FormContainer>
        ) : (
          // Placeholder for logged-in user interface
          <p>You are logged in</p>
        )}
      </>
    );
  }

  return (
    <div style={styles.container}>
    
      <div style={styles.searchContainer}>
        
      <p style={styles.header}>BookYatra</p>
    {user && (
      <div style={styles.signOut}>
        <button onClick={handleSignOut} style={styles.button}>Sign Out</button>
      </div>
    )}
        <div style={styles.n}>
        <p style={styles.p2}>Nestle Into Comfort, Where Quietude Meets Luxury</p>
        </div>

        <div style={styles.inputGroup1}>
          <label style={styles.label1}>Search Query (City, District, etc.)</label>
          <input
            type="text"
            style={styles.input}
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            placeholder="Enter city"
            required
          />
          <button style={styles.button1} onClick={fetchDestId}>Search </button>
        </div>
        
      
  
      {/* Hotel Search Section */}
      <div style={styles.formContainer}>
        <div style={styles.inputGroup}>
          <label style={styles.label}>Destination ID</label>
          <input
            type="text"
            style={styles.input}
            value={destId}
            onChange={(e) => setDestId(e.target.value)}
            placeholder="Enter destination ID"
            required
          />
        </div>
        <div style={styles.inputGroup}>
          <label style={styles.label}>Arrival Date</label>
          <input
            type="date"
            style={styles.input}
            value={arrivalDate}
            onChange={(e) => setArrivalDate(e.target.value)}
            required
          />
        </div>
        <div style={styles.inputGroup}>
          <label style={styles.label}>Departure Date</label>
          <input
            type="date"
            style={styles.input}
            value={departureDate}
            onChange={(e) => setDepartureDate(e.target.value)}
            required
          />
        </div>
        <button style={styles.button} onClick={fetchHotels}>
          Search Hotels
        </button>
      
      </div>
      </div>
  
      <div style={styles.flexContainer}>
        {/* Left Container: Destination Results */}
        <div style={{ ...styles.resultsContainer, ...styles.halfWidthContainer }}>
          {destResults.map((dest, index) => (
            <div key={index} style={styles.resultItem}>
              <p>Destination ID: {dest.dest_id}</p>
              <p>City: {dest.city_name}</p>
              <p>Region: {dest.region}</p>
              <p>Country: {dest.country}</p>
              <p>Type: {dest.search_type}</p>
            </div>
          ))}
        </div>
  
        {/* Right Container: Hotel Results */}
        <div style={{ ...styles.resultsContainer, ...styles.halfWidthContainer }}> 
      {hotels.map((hotel, index) => (
        
        <div key={index} style={styles.resultItem2}>
          <h3 style={styles.hotelName1}>{hotel.property.name}</h3>
          <p style={styles.hotelInfo1}>{hotel.accessibilityLabel}</p>
          <button 
            style={styles.favoriteButton1} 
            onClick={() => addToFavorites(hotel)}
          >
            Add to Favorites
          </button>
        </div>
      ))}
      </div>
    
{/* Container for Favorites */}
<div style={{ ...styles.resultsContainer, ...styles.halfWidthContainer }}>
  <h2>Favorites:</h2>
  {favorites.length > 0 ? (
     <div>
     {favorites.map((fav, index) => (
       <div key={index} style={styles.resultItem}>
         <h3>{fav.property.name}</h3>
         <img src={fav.property.mainPhotoUrl} alt={fav.property.name} style={{ width: '100px', height: '100px' }}/>
         <p>Address: {fav.property.address}</p>
         <p>Rating: {fav.property.rating}</p>
         <p>Price: {fav.property.priceBreakdown.grossPrice.value} {fav.property.priceBreakdown.grossPrice.currency}</p>
         {/* Add other details as per your data structure */}
       </div>
     ))}
     <div>
        <strong>Total Price: {calculateTotalPrice()} AED</strong>
      </div>
      <button onClick={submitFavorites} style={styles.button}>Submit Favorites</button>
      {submitStatus && <p>{submitStatus}</p>}
    </div>
  ) : (
    <p>No favorites added.</p>
  )}
</div>

      </div>
    </div>
  );
}

export default DestIdSearch;
